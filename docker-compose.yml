version: '3.8'

services:
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    user: root
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=false
    ports:
      - "8080:8080" # Spark Web UI
      - "7077:7077" # Spark Master
    networks:
      - my_network
    volumes:
      - D:\pyspark\pyspark1\data:/spark-data

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    user: root
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    networks:
      - my_network
    depends_on:
      - spark-master
    volumes:
      - D:\pyspark\pyspark1\data:/spark-data

  airflow:
    image: apache/airflow:2.7.2
    container_name: airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__RBAC=True
      - AIRFLOW__WEBSERVER__WORKERS=4
      - AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=30
    volumes:
      - ./airflow:/opt/airflow # Mount your airflow directory
      - ./src:/opt/src # Mount your src directory
    ports:
      - '8081:8080' # Airflow UI
    networks:
      - my_network
    command: >
      bash -c "airflow db init && airflow webserver"

  airflow-scheduler:
    image: apache/airflow:2.7.2
    container_name: airflow-scheduler
    depends_on:
      - airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
    volumes:
      - ./airflow:/opt/airflow # Keep only this volume
      - ./src:/opt/src # Mount your src directory
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket
    networks:
      - my_network
    command: >
      bash -c "airflow scheduler"

networks:
  my_network:


volumes:
  spark-data:
